#!/bin/bash

sha=${1}

python << EOF
import re
import subprocess

def get_commit_hashes():
    commit_hashes = []

    result = subprocess.run(['git', 'rev-list', '${sha}..'],
        capture_output=True, text=True)

    for commit in result.stdout.splitlines():
        commit_hashes.append(commit)

    return commit_hashes

def get_commit_messages():
    commit_messages = {}

    for hash in get_commit_hashes():
        result = subprocess.run(['git', 'log', '--format=%B', hash, '-n', '1'],
            capture_output=True, text=True)

        # Get individual lines
        lines = result.stdout.splitlines()

        # Remove empty strings
        lines = [x for x in lines if x]

        if len(lines) > 0:
            # Skip merge commits
            if not lines[0].startswith("Merge") and (not 'pull request' in lines[0] or not 'into' in lines[0]):
                commit_messages[hash] = lines

    return commit_messages

def print_error(hash, lines, line, message):
    lines_text = '\n'.join(lines)

    print(f"### Found formatting issue in commit ###\n{hash}\n")
    print(f"### Issue ###\n{message}\n")
    print(f"### Line with issue ###\n{line}\n")
    print(f"### Commit message ###\n{lines_text}\n")

# Main Logic
# https://robertcooper.me/post/git-commit-messages
# https://www.freecodecamp.org/news/how-to-write-better-git-commit-messages/
# https://initialcommit.com/blog/git-commit-messages-best-practices
# https://github.com/torvalds/subsurface-for-dirk/blob/a48494d2fbed58c751e9b7e8fbff88582f9b2d02/README#L88

for hash, lines in get_commit_messages().items():
    # Rules for commit titles

    if len(lines[0]) < 10:
        print_error(hash, lines, lines[0], "Commit title is too short.\nMinimum length is 10 characters.\nPlease provide "
            "a more detailed summary of your changes.")

    if len(lines[0]) > 72:
        print_error(hash, lines, lines[0], "Commit title is too long.\nMaximum length is 72 characters.\n"
            "If you need to provide a more detailed summary of your chages you should provide a multi-line commit message")

    if '|' in lines[0]:
        print_error(hash, lines, lines[0], "Found invalid characters in commit title.\nIf you need to provide a more "
            "detailed summary of your chages you should provide a multi-line commit message.\nInvalid characters:\n| (pipe)")

    # Rules across all commit messages

    for line in lines:
        # "Update filename.ext" is the default commit message generated by the GitHub
        # web client and some other git frontend programs. We want more detailed
        # commit messages than this.
        #
        # ^          : Start of string.
        # "update "  : The direct string "update ". We check against a lower-case entry.
        # [^ ]*\.    : Any number characters that are NOT a space, ending in a period character.
        # [a-z]{1,3} : 1-3 entries of characters a-z. This is looking for file extensions.
        # $          : End of string.
        for match in re.finditer("^update [^ ]*\.[a-z]{1,3}$", line.lower()):
            print_error(hash, lines, line, "Detected automatic commit message (Example: \"Update filename.ext\").\nPlease "
                "provide a more detailed summary of your changes.")

        if 'oops' in line.lower() or 'lol' in line.lower():
            print_error(hash, lines, line, "Detected unhelpful language in commit message.\nPlease "
                "describe what you have changed with this commit.\nUnhelpful language:\nOops\nWhoops\nlol")
EOF
